import "core"
import "core/pointer"

type Option[T] {
  issome Bool
  value T
}

fn some[T](v T) Option[T] {
  init(Option[T]){true; v}
}

fn none[T]() Option[T] {
  var opt Option[T]
  opt.issome = false
  opt
}

type TrieKey {
  s String
  pos Int
}

type Trie[T] {
  value RPtr[T]
  next Array[128, RPtr[Trie[T]]]
}

fn new_trie[T]() Trie[T] {
  var t Trie[T]
  for (i : range(0, 127)) {
    t.next!i = null_rptr[Trie[T]]()
  }
  t
}

fn insert[T](t ref Trie[T], key ref TrieKey, value T) {
  if (length(key.s) > key.pos) {
    nextpos := cast[Int](key.s!key.pos)
    if (is_null(t.next!nextpos)) {
      t.next!nextpos = alloc[Trie[T]]()
      unref(to_ptr(t.next!nextpos)) = new_trie[T]()
    }
    key.pos += 1
    insert(unref(to_ptr(t.next!nextpos)), key, value)
  } else {
    t.value = alloc[T]()
    unref(to_ptr(t.value)) = value
  }
}
fn insert[T](t ref Trie[T], s String, value T) {
  key := init(TrieKey){s; int(0)}
  insert(t, key, value)
}

fn find[T](t Trie[T], key ref TrieKey) Option[T] {
  if (length(key.s) <= key.pos) {
    some(unref(to_ptr(t.value)))
  } else {
    nextpos := cast[Int](key.s!key.pos)
    if (is_null(t.next!nextpos)) {
      none[T]()
    } else {
      key.pos += 1
      find(unref(to_ptr(t.next!nextpos)), key)
    }
  }
}
fn find[T](t Trie[T], s String) Option[T] {
  key := init(TrieKey){s; int(0)}
  find(t, key)
}

type JsonStream {
  s String
  pos Int
}

enum JsonKind {
  JSON_OBJECT
  JSON_ARRAY
  JSON_STRING
  JSON_INT
  JSON_BOOL
}

type Pair[T] {
  key String
  value T
}

enum DStringKind {
  DSTRING_STATIC
  DSTRING_NORMAL
}

type DString {
  kind DStringKind
  union {
    ststr STString
    normstr String
  }
}

fn dstring(s STString) DString {
  var ds DString
  ds.kind = DSTRING_STATIC
  ds.ststr = s
  ds
}
fn dstring(s String) DString {
  var ds DString
  ds.kind = DSTRING_NORMAL
  ds.normstr = s
  ds
}
fn to_cs(s DString) CString {
  if (s.kind == DSTRING_STATIC) {
    to_cs(s.ststr)
  } else {
    to_cs(s.normstr)
  }
}
fn `==(a DString, b DString) Bool {
  to_cs(a) == to_cs(b)
}
fn print(s DString) {
  if (s.kind == DSTRING_STATIC) {
    print(s.ststr)
  } else {
    print(s.normstr)
  }
}

type JsonObj {
  kind JsonKind
  union {
    pairs Vec[Pair[RPtr[JsonObj]]]
    vec Vec[RPtr[JsonObj]]
    boolval Bool
    intval Int64
    strval DString
  }
}
typedef JsonPair Pair[RPtr[JsonObj]]
typedef JsonValue RPtr[JsonObj]

fn new_jsonstream(s String) JsonStream {
  init(JsonStream){s; int(0)}
}
fn getchar(s JsonStream) Char {
  s.s!s.pos
}
fn next(s ref JsonStream) Char {
  c := getchar(s)
  s.pos += 1
  c
}
fn is_end(s JsonStream) Bool {
  s.pos >= length(s.s)
}

fn skip_spaces(s ref JsonStream) {
  while (true) {
    if (getchar(s) == c" ") {
    } elif (getchar(s) == char(10)) {
    } elif (getchar(s) == char(13)) {
    } else {
      break()
    }
    next(s)
  }
}

fn obj(p JsonValue) ref JsonObj {
  unref(to_ptr(p))
}
fn new_jsonvalue(kind JsonKind) JsonValue {
  p := alloc[JsonObj]()
  obj(p).kind = kind
  p
}

fn parse_string(s ref JsonStream) JsonValue {
  next(s)
  var sbuf Array[1024, Char]
  var sval String
  issval := false
  i := 0
  while (true) {
    ch := next(s)
    if (ch == c"\"") {
      break()
    }
    if (i < 1023) {
      sbuf!i = ch
      sbuf!(i+1) = cast[Char](0)
    } else {
      if (i == 1023) {
        issval = true
        sval = string(cast[CString](getref(sbuf)))
      }
      push(sval, ch)
    }
    i += 1
  }
  json := new_jsonvalue(JSON_STRING)
  if (issval) {
    obj(json).strval = dstring(sval)
  } else {
    obj(json).strval = dstring(ststring(cast[CString](getref(sbuf))))
  }
  json
}

fn `<=(a Char, b Char) Bool $[importc "<=", header nodeclc, patternc infixc]

fn isdigit(c Char) Bool {
  c"0" <= c && c <= c"9"
}

fn parse_int(s ref JsonStream) JsonValue {
  var sbuf Array[1024, Char]
  var sval String
  issval := false
  i := 0
  while (true) {
    if (not(isdigit(getchar(s)))) {
      break()
    }
    if (i < 1023) {
      sbuf!i = getchar(s)
      sbuf!(i+1) = cast[Char](0)
    } else {
      if (i == 1023) {
        issval = true
        sval = string(cast[CString](getref(sbuf)))
      }
      push(sval, getchar(s))
    }
    next(s)
    i += 1
  }
  json := new_jsonvalue(JSON_INT)
  if (issval) {
    obj(json).strval = dstring(sval)
  } else {
    obj(json).strval = dstring(ststring(cast[CString](getref(sbuf))))
  }
  json
}

fn parse_key(s ref JsonStream) String {
  next(s)
  sval := s""
  while (true) {
    ch := next(s)
    if (ch == c"\"") {
      break()
    }
    push(sval, ch)
  }
  sval
}

fn is_ident(s ref JsonStream, id String) Bool {
  startpos := s.pos
  for (i : range(0, length(id)-1)) {
    if (is_end(s)) {
      s.pos = startpos
      return(false)
    }
    if (id!i != next(s)) {
      s.pos = startpos
      return(false)
    }
  }
  s.pos = startpos
  true
}

fn parse_ident(s ref JsonStream) JsonValue {
  if (is_ident(s, s"true")) {
    s.pos += 4
    json := new_jsonvalue(JSON_BOOL)
    obj(json).boolval = false
    json
  } elif (is_ident(s, s"false")) {
    s.pos += 5
    json := new_jsonvalue(JSON_BOOL)
    obj(json).boolval = false
    json
  } else {
    json := new_jsonvalue(JSON_OBJECT)
    json
  }
}

fn parse_json(s ref JsonStream) JsonValue $[decl]

fn parse_object(s ref JsonStream) JsonValue {
  next(s)
  #trie := new_trie[JsonValue]()
  v := vec[JsonPair]()
  
  while (true) {
    skip_spaces(s)
    if (getchar(s) == c"}") {
      next(s)
      break()
    }
    if (getchar(s) == c",") {
      next(s)
      skip_spaces(s)
    }
    key := parse_key(s)
    skip_spaces(s)
    next(s) # c":"
    skip_spaces(s)
    value := parse_json(s)
    push(v, init(JsonPair){key; value})
    #insert(trie, key, value)
  }

  json := new_jsonvalue(JSON_OBJECT)
  obj(json).pairs = v
  # obj(json).trie = trie
  json
}

fn parse_array(s ref JsonStream) JsonValue {
  next(s)
  v := vec[JsonValue]()
  
  while (true) {
    skip_spaces(s)
    if (getchar(s) == c"]") {
      next(s)
      break()
    }
    if (getchar(s) == c",") {
      next(s)
      skip_spaces(s)
    }
    value := parse_json(s)
    push(v, value)
  }

  json := new_jsonvalue(JSON_ARRAY)
  obj(json).vec = v
  json
}

fn parse_json(s ref JsonStream) JsonValue {
  skip_spaces(s)
  ch := getchar(s)
  if (ch == c"\"") {
    parse_string(s)
  } elif (isdigit(ch)) {
    parse_int(s)
  } elif (ch == c"{") {
    parse_object(s)
  } elif (ch == c"[") {
    parse_array(s)
  } else {
    parse_ident(s)
  }
}

fn `!(json JsonValue, index Int) JsonValue {
  obj(json).vec!index
}
fn `!(json JsonValue, key String) Option[JsonValue] {
  # find(obj(json).trie, key)
  for (i : range(0, length(obj(json).pairs))) {
    if ((obj(json).pairs!i).key == key) {
      return(some((obj(json).pairs!i).value))
    }
  }
  none[JsonValue]()
}

# fn json_test() {
#   in_region(1){
#   s := new_jsonstream(s"\"yukari\"")
#   obj := parse_json(s)
#   println(cast[Int](obj(obj).kind))
#   println(obj.strval)
# 
#   si := new_jsonstream(s"9")
#   obji := parse_json(si)
#   println(cast[Int](obj(obj).kind))
#   println(obji.strval)
# 
#   s2 := new_jsonstream(s"{\"name\": \"akari\", \"type\": \"voiceroid\"}")
#   obj2 := parse_json(s2)
#   println(cast[Int](obj2.kind))
#   opt := obj2!s"name"
#   println(opt.value.strval)
#   opt2 := obj2!s"type"
#   println("sss!")
#   println(opt2.value.strval)
#   println("eee!")
# 
#   s3 := new_jsonstream(s"{\"is\":true, \"can\":false}")
#   obj3 := parse_json(s3)
#   opt3 := obj3!s"is"
#   println(opt3.value.boolval)
#   opt4 := obj3!s"can"
#   println(opt4.value.boolval)
# 
#   s4 := new_jsonstream(s"[\"a\", 1, 2, 3]")
#   obj4 := parse_json(s4)
#   }
# }
# json_test()
